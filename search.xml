<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于表单提交中button按钮默认事件覆盖了js点击事件问题</title>
      <link href="/post/50652.html"/>
      <url>/post/50652.html</url>
      
        <content type="html"><![CDATA[<p>点击提交后url多了一个问号</p><p><img src="/resource_img/bug1.png" alt="bug1"></p><p>这个是 form表单点击了button按钮，触发了他的默认事件，导致自己写的一个js点击事件不起作用，删除form标签即可。</p><p><img src="/resource_img/bug2.png" alt="bug2"></p><p>这个问题还导致了TRACE: No view rendering,null ModelAndView returned.使前端接收不到数据。</p><p><img src="/resource_img/bug3.png" alt="bug3"></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu22.04上安装Redis教程</title>
      <link href="/post/6478.html"/>
      <url>/post/6478.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p>在Ubuntu中，可以直接使用apt安装Redis。<br>先更新系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ sudo apt update</span><br><span class="line">ruomeng@ruomeng-virtual-machine:~$ sudo apt upgrade</span><br></pre></td></tr></table></figure><p>然后使用apt安装Redis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ sudo apt install redis-server</span><br></pre></td></tr></table></figure><p>安装完成后查看Redis版本号，检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ redis-cli --version</span><br><span class="line">redis-cli 6.0.16</span><br></pre></td></tr></table></figure><p>查到版本号证明安装成功，输入redis-cli命令后就可以使用Redis命令了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> <span class="built_in">id</span> 1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">id</span></span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><h2 id="指定配置启动"><a href="#指定配置启动" class="headerlink" title="指定配置启动"></a>指定配置启动</h2><p>打开&#x2F;etc&#x2F;redis&#x2F;redis.conf 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ sudo nano /etc/redis/redis.conf </span><br></pre></td></tr></table></figure><p>修改该文件的配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line">daemonize <span class="built_in">yes</span> </span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line">requirepass 123123</span><br></pre></td></tr></table></figure><p>配置完成后，保存（ctrl+s）并关闭（ctrl+x）文件。然后重启Redis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ systemctl restart redis-server</span><br></pre></td></tr></table></figure><p>使用ip addr命令查询IP：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:f2:da:3d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet 192.168.179.129/24 brd 192.168.179.255 scope global dynamic noprefixroute ens33</span><br><span class="line">       valid_lft 1533sec preferred_lft 1533sec</span><br><span class="line">    inet6 fe80::34c2:43be:256f:9519/64 scope <span class="built_in">link</span> noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>inet后面的192.168.179.129就是了。</p><p>通过IP、端口号、密码就可以连接上Redis了。</p><h2 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h2><p>首先找到redis-server和redis.conf（默认位置：&#x2F;etc&#x2F;redis&#x2F;redis.conf）的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ <span class="built_in">which</span> redis-server</span><br><span class="line">/usr/bin/redis-server</span><br></pre></td></tr></table></figure><p>新建一个系统服务文件 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ sudo vi /etc/systemd/system/redis1.service</span><br></pre></td></tr></table></figure><p>将下面的内容写入到系统服务文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/redis-server /etc/redis/redis.conf</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>保存系统服务文件（先按esc，然后输入:wq进行保存），然后输入命令重载系统服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>最后，执行下面的命令实现开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruomeng@ruomeng-virtual-machine:~$ systemctl <span class="built_in">enable</span> redis1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系统下载与安装教程</title>
      <link href="/post/14885.html"/>
      <url>/post/14885.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu系统的下载"><a href="#Ubuntu系统的下载" class="headerlink" title="Ubuntu系统的下载"></a>Ubuntu系统的下载</h2><p>清华大学开源网站镜像站网址：<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>进入网站搜索Ubuntu</p><p><img src="/resource_img/Ubuntu1.png" alt="Ubuntu1"></p><p><img src="/resource_img/Ubuntu2.png" alt="Ubuntu2"></p><p><img src="/resource_img/Ubuntu3.png" alt="Ubuntu3"></p><p>点击上方红色框框里的蓝色字体下载</p><p>或者直接点击该超链接“<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/22.04.2/ubuntu-22.04.2-desktop-amd64.iso">ubuntu-22.04.2-desktop-amd64.iso</a>”即可下载</p><h2 id="Ubuntu系统的安装"><a href="#Ubuntu系统的安装" class="headerlink" title="Ubuntu系统的安装"></a>Ubuntu系统的安装</h2><p>安装好虚拟机后打开，点击创建新的虚拟机</p><p><img src="/resource_img/Ubuntu4.png" alt="Ubuntu4"></p><p><img src="/resource_img/Ubuntu5.png" alt="Ubuntu5"></p><p><img src="/resource_img/Ubuntu6.png" alt="Ubuntu6"></p><p><img src="/resource_img/Ubuntu7.png" alt="Ubuntu7"></p><p><img src="/resource_img/Ubuntu8.png" alt="Ubuntu8"></p><p><img src="/resource_img/Ubuntu9.png" alt="Ubuntu9"></p><p><img src="/resource_img/Ubuntu10.png" alt="Ubuntu10"></p><p>点击完成后开启虚拟机</p><p><img src="/resource_img/Ubuntu11.png" alt="Ubuntu11"></p><p><img src="/resource_img/Ubuntu12.png" alt="Ubuntu12"></p><p><img src="/resource_img/Ubuntu13.png" alt="Ubuntu13"></p><p><img src="/resource_img/Ubuntu14.png" alt="Ubuntu14"></p><p><img src="/resource_img/Ubuntu15.png" alt="Ubuntu15"></p><p><img src="/resource_img/Ubuntu16.png" alt="Ubuntu16"></p><p><img src="/resource_img/Ubuntu17.png" alt="Ubuntu17"></p><p>到这里重启后就可以使用了</p><h2 id="设置中文环境"><a href="#设置中文环境" class="headerlink" title="设置中文环境"></a>设置中文环境</h2><p><img src="/resource_img/Ubuntu18.png" alt="Ubuntu18"></p><p><img src="/resource_img/Ubuntu19.png" alt="Ubuntu19"></p><p><img src="/resource_img/Ubuntu20.png" alt="Ubuntu20"></p><p><img src="/resource_img/Ubuntu21.png" alt="Ubuntu21"></p><p>重启后再次进入设置</p><p><img src="/resource_img/Ubuntu22.png" alt="Ubuntu22"></p><p><img src="/resource_img/Ubuntu23.png" alt="Ubuntu23"></p><p>安装完成后重启就设置完成了</p><h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><p>Ctrl+Alt+T打开终端，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ibus-pinyin</span><br></pre></td></tr></table></figure><p>安装完成后，进入“设置”，点击“键盘”，添加“输入源”</p><p><img src="/resource_img/Ubuntu24.png" alt="Ubuntu24"></p><p><img src="/resource_img/Ubuntu25.png" alt="Ubuntu25"></p><p><img src="/resource_img/Ubuntu26.png" alt="Ubuntu26"></p><p>到这就安装完成了，中英文输入法快捷键“shift”&#x2F;“windows+space”</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机VMware下载与安装教程</title>
      <link href="/post/3095.html"/>
      <url>/post/3095.html</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机VMware的下载"><a href="#虚拟机VMware的下载" class="headerlink" title="虚拟机VMware的下载"></a>虚拟机VMware的下载</h2><p>官网下载地址：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">下载 VMware Workstation Pro | CN</a></p><p>往下翻，找到并点击“立即下载”</p><p><img src="/resource_img/VMware1.png" alt="VMware1"></p><h2 id="虚拟机VMware的安装"><a href="#虚拟机VMware的安装" class="headerlink" title="虚拟机VMware的安装"></a>虚拟机VMware的安装</h2><p>点击下载好的文件开始安装</p><p><img src="/resource_img/VMware2.png" alt="VMware2"></p><p><img src="/resource_img/VMware3.png" alt="VMware3"></p><p><img src="/resource_img/VMware4.png" alt="VMware4"></p><p><img src="/resource_img/VMware5.png" alt="VMware5"></p><p><img src="/resource_img/VMware6.png" alt="VMware6"></p><p><img src="/resource_img/VMware7.png" alt="VMware7"></p><p><img src="/resource_img/VMware8.png" alt="VMware8"></p><p>安装完成后的第一次启动会需要许可证密钥。（百度搜索许可证密钥即可）</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传文章到博客</title>
      <link href="/post/23520.html"/>
      <url>/post/23520.html</url>
      
        <content type="html"><![CDATA[<p>1.在根目录调出git命令框，执行以下代码，创建“上传文章到博客.md”文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;上传文章到博客&quot;</span></span><br></pre></td></tr></table></figure><p>2.执行以下代码即可在本地打开博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo cl &amp;&amp; hexo g  &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>3.找到“上传文章到博客.md”文件进行编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">title: 上传文章到博客</span><br><span class="line">abbrlink: 23520</span><br><span class="line">date: 2023-07-22 20:16:07</span><br><span class="line">tags:</span><br><span class="line">  - </span><br><span class="line">categories: </span><br><span class="line">top_img: /img/11.jpg</span><br><span class="line">cover: /img/11.jpg</span><br><span class="line">description: 上传文章到博客</span><br><span class="line"></span><br><span class="line">文章内容</span><br></pre></td></tr></table></figure><p>4.执行以下代码上传到GitHub上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo cl &amp;&amp; hexo g  &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/post/5009.html"/>
      <url>/post/5009.html</url>
      
        <content type="html"><![CDATA[<h2 id="树状数组适用场景"><a href="#树状数组适用场景" class="headerlink" title="树状数组适用场景"></a>树状数组适用场景</h2><p>多次修改某个数（单点），求区间和：「树状数组」</p><p>多次修改某个区间，求区间和：「树状数组」</p><h2 id="树状数组模板"><a href="#树状数组模板" class="headerlink" title="树状数组模板"></a>树状数组模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaNote.interval_add;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Binary Indexed Tree</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] tree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x , <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x ; i &lt;= n ; i += lowbit(i))&#123;</span><br><span class="line">            tree[i] += num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前缀和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x ; i &gt; <span class="number">0</span> ; i -= lowbit(i))&#123;</span><br><span class="line">            ans += tree[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        n = nums.length;</span><br><span class="line">        tree = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            add(i + <span class="number">1</span> , nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(sumRange(<span class="number">1</span> , <span class="number">3</span>));</span><br><span class="line">        update(<span class="number">2</span> , <span class="number">6</span>);</span><br><span class="line">        System.out.println(sumRange(<span class="number">1</span> , <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        update(<span class="number">2</span> , <span class="number">3</span>);</span><br><span class="line">        System.out.println(sumRange(<span class="number">0</span> , <span class="number">5</span>));</span><br><span class="line">        update(<span class="number">1</span> , <span class="number">3</span> , <span class="number">6</span>);</span><br><span class="line">        System.out.println(sumRange(<span class="number">0</span> , <span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改单个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> i , <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        add(i + <span class="number">1</span> , num - nums[i]);</span><br><span class="line">        nums[i] = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改区间数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> l , <span class="type">int</span> r , <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l ; i &lt;= r ; i++)&#123;</span><br><span class="line">            add(i + <span class="number">1</span> , num - nums[i]);</span><br><span class="line">            nums[i] = num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//区间和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> l , <span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> query(r + <span class="number">1</span>) - query(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="/resource_img/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84.png" alt="树状数组"></p><p><img src="/resource_img/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84add().png" alt="树状数组add()"></p><p><img src="/resource_img/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84ask().png" alt="树状数组ask()"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><a href="https://leetcode.cn/problems/range-sum-query-mutable/">力扣307.区域和检索 - 数组可修改</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 区间求和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/post/60033.html"/>
      <url>/post/60033.html</url>
      
        <content type="html"><![CDATA[<p><strong>回溯法</strong>按深度优先策略搜索问题的解空间树。首先从根节点出发搜索解空间树，当算法搜索至解空间树的某一节点时，先利用<strong>剪枝函数</strong>判断该节点是否可行（即能得到问题的解）。如果不可行，则跳过对该节点为根的子树的搜索，逐层向其祖先节点回溯；否则，进入该子树，继续按深度优先策略搜索。</p><h2 id="回溯算法模板"><a href="#回溯算法模板" class="headerlink" title="回溯算法模板"></a>回溯算法模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">List&lt;Value&gt; result;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(路径, 选择列表)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (满足结束条件)&#123;</span><br><span class="line">        result.add(路径);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (选择 : 选择列表) &#123;</span><br><span class="line">        <span class="comment">// 剪枝 (排除不合法的选择)</span></span><br><span class="line">        <span class="keyword">if</span> (剪枝的条件) <span class="keyword">continue</span>;</span><br><span class="line">        做选择;</span><br><span class="line">        <span class="comment">// 进入下一层决策树</span></span><br><span class="line">        backtrack(路径, 选择列表);</span><br><span class="line">       撤销选择;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><a href="https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/">力扣剑指Offer38.字符串的排列</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; rec;</span><br><span class="line">    <span class="type">boolean</span>[] vis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] permutation(String s) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        rec = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">perm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        backtrack(arr, <span class="number">0</span>, n, perm);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> rec.size();</span><br><span class="line">        String[] recArr = <span class="keyword">new</span> <span class="title class_">String</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            recArr[i] = rec.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> recArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">char</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> n, StringBuffer perm)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            rec.add(perm.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[j] || (j &gt; <span class="number">0</span> &amp;&amp; !vis[j - <span class="number">1</span>] &amp;&amp; arr[j - <span class="number">1</span>] == arr[j])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[j] = <span class="literal">true</span>;</span><br><span class="line">            perm.append(arr[j]);</span><br><span class="line">            backtrack(arr, i + <span class="number">1</span>, n, perm);</span><br><span class="line">            perm.deleteCharAt(perm.length() - <span class="number">1</span>);</span><br><span class="line">            vis[j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经典问题——八皇后问题"><a href="#经典问题——八皇后问题" class="headerlink" title="经典问题——八皇后问题"></a>经典问题——八皇后问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(solveNQueens(<span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span>[] position = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(position, -<span class="number">1</span>);</span><br><span class="line">        Set&lt;Integer&gt; column = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; diagonal1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; diagonal2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        backtrack(result, position, n, <span class="number">0</span>, column, diagonal1, diagonal2);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(List&lt;List&lt;String&gt;&gt; result, <span class="type">int</span>[] position, <span class="type">int</span> n, <span class="type">int</span> row, Set&lt;Integer&gt; column, Set&lt;Integer&gt; diagonal1, Set&lt;Integer&gt; diagonal2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            result.add(format(position, n));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (column.contains(i)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (diagonal1.contains(i - row)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (diagonal2.contains(i + row)) <span class="keyword">continue</span>;</span><br><span class="line">            position[row] = i;</span><br><span class="line">            column.add(i);</span><br><span class="line">            diagonal1.add(i - row);</span><br><span class="line">            diagonal2.add(i + row);</span><br><span class="line">            backtrack(result, position, n, row + <span class="number">1</span>, column, diagonal1, diagonal2);</span><br><span class="line">            position[row] = -<span class="number">1</span>;</span><br><span class="line">            column.remove(i);</span><br><span class="line">            diagonal1.remove(i - row);</span><br><span class="line">            diagonal2.remove(i + row);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">format</span><span class="params">(<span class="type">int</span>[] position, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span>[] row = <span class="keyword">new</span> <span class="title class_">char</span>[n];</span><br><span class="line">            Arrays.fill(row, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            row[position[i]] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">String</span>(row));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯算法 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法</title>
      <link href="/post/3510.html"/>
      <url>/post/3510.html</url>
      
        <content type="html"><![CDATA[<p><strong>二分的本质是「二段性」而非「单调性」，「二段性」还能细分，不仅仅只有满足01特性（满足&#x2F;不满足）的「二段性」可以使用二分，满足1?特性（一定满足&#x2F;不一定满足）也可以二分。</strong></p><p><strong>模板一：</strong>在有序数组中，目标值第一次出现的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">        System.out.println(dichotomy(nums, <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dichotomy</span><span class="params">(<span class="type">int</span>[] nums , <span class="type">int</span> targer)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span> , r = n;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &gt;= targer)&#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模板二：</strong><a href="https://leetcode.cn/problems/find-peak-element/">力扣162.寻找峰值</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(nums));</span><br><span class="line">        System.out.println(dichotomy(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dichotomy</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[mid + <span class="number">1</span>])&#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终还是需要根据实际要求合理使用二分法</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5加密</title>
      <link href="/post/56393.html"/>
      <url>/post/56393.html</url>
      
        <content type="html"><![CDATA[<h2 id="jdk自带的api实现"><a href="#jdk自带的api实现" class="headerlink" title="jdk自带的api实现"></a>jdk自带的api实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MD5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMD5</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(s.getBytes());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, md.digest()).toString(<span class="number">16</span>);</span><br><span class="line">            <span class="comment">//将加密后的字母变大写</span></span><br><span class="line">            <span class="comment">//return new BigInteger(1, md.digest()).toString(16).toUpperCase();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法二</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">char</span> hexChars[] = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line">            <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            md.update(bytes);</span><br><span class="line">            bytes = md.digest();</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[len * <span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">                <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> bytes[i];</span><br><span class="line">                chars[k++] = hexChars[b &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">                chars[k++] = hexChars[b &amp; <span class="number">0xf</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">            <span class="comment">//将加密后的字母变大写</span></span><br><span class="line">            <span class="comment">//return new String(chars).toUpperCase();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;MD5加密出错！！+&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(MD5.getMD5(<span class="string">&quot;111111&quot;</span>));</span><br><span class="line">        System.out.println(MD5.encrypt(<span class="string">&quot;111111&quot;</span>));</span><br><span class="line">        System.out.println(MD5.getMD5(<span class="string">&quot;111&quot;</span>));</span><br><span class="line">        System.out.println(MD5.encrypt(<span class="string">&quot;111&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MD5加密特性"><a href="#MD5加密特性" class="headerlink" title="MD5加密特性"></a>MD5加密特性</h2><ul><li>固定长度，任意数据得到的密文长度都相同</li><li>MD5是单向加密的加密算法</li><li>相同的明文在任意时间加密，得到的加密结果是相同的</li><li>MD5消息摘要算法，属Hash算法一类</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EXISTS与IN的区别</title>
      <link href="/post/23206.html"/>
      <url>/post/23206.html</url>
      
        <content type="html"><![CDATA[<ul><li><font color="red">如果查询的两个表大小相当，那么用 EXISTS 和 IN 差别不大</font></li><li><font color="red">如果两个表中一个较小表，一个较大表，则子查询表大的用 EXISTS，子查询表小的用 IN</font></li></ul><p>假设 表 t1 为小表，表 t2 为大表（id有索引）</p><p>  子查询为表t2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> t2)  </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>效率低，用到了 t1 表上 id 列的索引；   </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> id <span class="keyword">from</span> t2 <span class="keyword">where</span> id<span class="operator">=</span>t1.id)  </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>效率高，用到了 t2 表上 id 列的索引。</span><br></pre></td></tr></table></figure><p>  子查询为表t1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> t1)  </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>效率高，用到了t2 表上 id 列的索引；   </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> id <span class="keyword">from</span> t1 <span class="keyword">where</span> id<span class="operator">=</span>t2.id)  </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>效率低，用到了 t1 表上 id 列的索引。</span><br></pre></td></tr></table></figure><ul><li><font color="red">无论哪个表大，用 NOT EXISTS 都比 NOT IN 要快</font></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> t1) </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>效率低，内外表都进行全表扫描，不能用到索引；</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> id <span class="keyword">from</span> t1 <span class="keyword">where</span> id<span class="operator">=</span>t2.id)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>效率高，用到了 t1 表上 id 列的索引。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EXISTS与IN区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乐观锁与悲观锁</title>
      <link href="/post/56547.html"/>
      <url>/post/56547.html</url>
      
        <content type="html"><![CDATA[<ul><li><font color='red'>乐观锁</font>：比较适合<font color='red'>读取</font>操作比较频繁的场景，如果出现大量的写入操作，数据发生冲突的可能性就会增大，为了保证数据的一致性，应用层需要不断的重新获取数据，这样会增加大量的查询操作，降低了系统的吞吐量。</li><li><font color='red'>悲观锁</font>：比较适合<font color='red'>写入</font>操作比较频繁的场景，如果出现大量的读取操作，每次读取的时候都会进行加锁，这样会增加大量的锁的开销，降低了系统的吞吐量。</li></ul><p><font color='red'>注意</font>：</p><p>​使用悲观锁，需要关闭mysql的自动提交功能，将 set autocommit &#x3D; 0;</p><p>​mysql中的行级锁是基于索引的，如果sql没有走索引，那将使用表级锁把整张表锁住</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乐观锁与悲观锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程</title>
      <link href="/post/38563.html"/>
      <url>/post/38563.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/post/16107.html"/>
      <url>/post/16107.html</url>
      
        <content type="html"><![CDATA[<p><img src="/resource_img/collection.jpg" alt="集合"></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java三大特性</title>
      <link href="/post/37773.html"/>
      <url>/post/37773.html</url>
      
        <content type="html"><![CDATA[<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><strong>就是把类的属性私有化(private修饰），再通过公有方法(public)进行访问和修改</strong></p><h4 id="封装的实现"><a href="#封装的实现" class="headerlink" title="封装的实现"></a>封装的实现</h4><ul><li>需要修改属性的访问控制符（修改为private）；</li><li>创建getter&#x2F;setter方法（用于属性的读写）；</li><li>在getter&#x2F;setter方法中加入属性控制语句（用于判断属性值的合法性）;</li></ul><h4 id="为什么要封装呢？（优点）"><a href="#为什么要封装呢？（优点）" class="headerlink" title="为什么要封装呢？（优点）"></a>为什么要封装呢？（优点）</h4><ul><li><p>将变化隔离</p></li><li><p>便于使用</p></li><li><p>提高重用性</p></li><li><p>提高安全性</p></li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>如果子类继承了父类，那么子类就可以复用父类的方法和属性，并且可以在此基础上新增方法和属性</strong></p><p><font color='red'>注：Java是单继承语言，即每个类只能有一个父类；如果一个类没有指定父类（即没有继承任何类），那么这个类默认继承Object类</font></p><h4 id="为什么要用继承呢？"><a href="#为什么要用继承呢？" class="headerlink" title="为什么要用继承呢？"></a>为什么要用继承呢？</h4><ul><li>减少代码量，能很好的提高复用率。</li><li>使类与类之间存在继承关系，是实现多态操作的前提。</li></ul><h4 id="什么时候使用继承？"><a href="#什么时候使用继承？" class="headerlink" title="什么时候使用继承？"></a>什么时候使用继承？</h4><ul><li>具有公共的属性与行为操作的时候，提高复用性</li><li>具有is–a的所属关系的类与类之间</li></ul><h4 id="为啥不用多继承？"><a href="#为啥不用多继承？" class="headerlink" title="为啥不用多继承？"></a>为啥不用多继承？</h4><p>因为多继承会导致”致命方块”问题</p><ul><li>比如A同时继承B和C，然后B和C各自继承D</li><li>B和C各自重写了D的fun方法</li><li>那这时A该调用哪个类的fun方法呢</li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><strong>多态指的是，同一个行为具有多个不同表现形式或形态的能力</strong></p><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。</p><p>指向子类的父类引用由于向上转型了，它只能访问父类中拥有的方法和属性，而对于子类中存在而父类中不存在的方法，该引用是不能使用的，尽管是重载该方法。若子类重写了父类中的某些方法，在调用该些方法的时候，必定是使用子类中定义的这些方法（动态连接、动态调用）。</p><p> 对于面向对象而已，多态分为编译时多态和运行时多态。其中编辑时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编辑之后会变成两个不同的函数，在运行时谈不上多态。而运行时多态是动态的，它是通过动态绑定来实现的，也就是我们所说的多态性。</p><h4 id="实现多态的两种形式"><a href="#实现多态的两种形式" class="headerlink" title="实现多态的两种形式"></a>实现多态的两种形式</h4><p>继承、接口</p><h4 id="实现多态的三个必要条件"><a href="#实现多态的三个必要条件" class="headerlink" title="实现多态的三个必要条件"></a>实现多态的三个必要条件</h4><ul><li>必须有子类和父类，具有继承或实现（继承）</li><li>子类必须重写父类的方法（重写）</li><li>父类的引用指向子类的对象（向上转型）</li></ul><h4 id="多态一般用在哪些场景呢？"><a href="#多态一般用在哪些场景呢？" class="headerlink" title="多态一般用在哪些场景呢？"></a>多态一般用在哪些场景呢？</h4><p>场景一：方法的参数，即方法定义时，<strong>父类</strong>作为方法的<strong>形参</strong>，然后调用时传入<strong>子类</strong>作为方法的<strong>实参</strong></p><p>场景二：方法的返回值，即方法定义时，<strong>父类</strong>作为方法的<strong>返回值</strong>，然后在方法内部实际返回<strong>子类</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java三大特性 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
